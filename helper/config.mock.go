// Code generated by MockGen. DO NOT EDIT.
// Source: 2023_asset_management/helper (interfaces: Configer)

// Package helper is a generated GoMock package.
package helper

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfiger is a mock of Configer interface.
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger.
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance.
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// DocPwd mocks base method.
func (m *MockConfiger) DocPwd() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocPwd")
	ret0, _ := ret[0].(string)
	return ret0
}

// DocPwd indicates an expected call of DocPwd.
func (mr *MockConfigerMockRecorder) DocPwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocPwd", reflect.TypeOf((*MockConfiger)(nil).DocPwd))
}

// DocUser mocks base method.
func (m *MockConfiger) DocUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// DocUser indicates an expected call of DocUser.
func (mr *MockConfigerMockRecorder) DocUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocUser", reflect.TypeOf((*MockConfiger)(nil).DocUser))
}

// GoogleDriveApiToken mocks base method.
func (m *MockConfiger) GoogleDriveApiToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleDriveApiToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoogleDriveApiToken indicates an expected call of GoogleDriveApiToken.
func (mr *MockConfigerMockRecorder) GoogleDriveApiToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleDriveApiToken", reflect.TypeOf((*MockConfiger)(nil).GoogleDriveApiToken))
}

// Port mocks base method.
func (m *MockConfiger) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockConfigerMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockConfiger)(nil).Port))
}
