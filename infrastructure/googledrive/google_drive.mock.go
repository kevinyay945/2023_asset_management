// Code generated by MockGen. DO NOT EDIT.
// Source: 2023_asset_management/infrastructure/googledrive (interfaces: GoogleDriver)

// Package googledrive is a generated GoMock package.
package googledrive

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	drive "google.golang.org/api/drive/v3"
)

// MockGoogleDriver is a mock of GoogleDriver interface.
type MockGoogleDriver struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleDriverMockRecorder
}

// MockGoogleDriverMockRecorder is the mock recorder for MockGoogleDriver.
type MockGoogleDriverMockRecorder struct {
	mock *MockGoogleDriver
}

// NewMockGoogleDriver creates a new mock instance.
func NewMockGoogleDriver(ctrl *gomock.Controller) *MockGoogleDriver {
	mock := &MockGoogleDriver{ctrl: ctrl}
	mock.recorder = &MockGoogleDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleDriver) EXPECT() *MockGoogleDriverMockRecorder {
	return m.recorder
}

// CheckAuthorization mocks base method.
func (m *MockGoogleDriver) CheckAuthorization() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorization")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAuthorization indicates an expected call of CheckAuthorization.
func (mr *MockGoogleDriverMockRecorder) CheckAuthorization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorization", reflect.TypeOf((*MockGoogleDriver)(nil).CheckAuthorization))
}

// CreateFile mocks base method.
func (m *MockGoogleDriver) CreateFile(arg0 GoogleDriveUploadLocation, arg1 string, arg2 []byte, arg3 string) (*drive.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*drive.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockGoogleDriverMockRecorder) CreateFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockGoogleDriver)(nil).CreateFile), arg0, arg1, arg2, arg3)
}

// GetFileParentId mocks base method.
func (m *MockGoogleDriver) GetFileParentId(arg0 GoogleDriveUploadLocation, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileParentId", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileParentId indicates an expected call of GetFileParentId.
func (mr *MockGoogleDriverMockRecorder) GetFileParentId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileParentId", reflect.TypeOf((*MockGoogleDriver)(nil).GetFileParentId), arg0, arg1)
}

// GetFilePublicLink mocks base method.
func (m *MockGoogleDriver) GetFilePublicLink(arg0 GoogleDriveUploadLocation, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePublicLink", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilePublicLink indicates an expected call of GetFilePublicLink.
func (mr *MockGoogleDriverMockRecorder) GetFilePublicLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePublicLink", reflect.TypeOf((*MockGoogleDriver)(nil).GetFilePublicLink), arg0, arg1)
}
